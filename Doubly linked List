class Bike
{
    Node head;
    class Node
    {
        int data;
        Node next;
        Node prev;
        Node(int data)
        {
            this.data = data;
            next = null;
            prev = null;
        }
    }
    //insertion at end
    public void insertatend(int data)
    {
        Node newNode = new Node(data);
        if(head==null)
        {
            head = newNode;
            return;
        }
        Node temp = head;
        while(temp.next!=null)
        {
            temp=temp.next;
        }
        temp.next=newNode;
        newNode.prev=temp;
    }
    public void insertatbegin(int data)
    {
        Node newNode = new Node(data);
        if(head==null)
        {
            head=newNode;
            return;
        }
        newNode.next=head;
        head.prev=newNode;
        head=newNode;
    }
    //inser at middle
    public void insertatmiddle(int data,int pos)
    {
        if(pos == 0)
        {
            insertatbegin(data);
            return;
        }
        Node newNode = new Node(data);
        Node temp = head;
        for(int i=0;i<pos-1&&temp!=null;i++)
        {
            temp=temp.next;
        }
        if(temp==null||temp.next==null)
        {
            insertatend(data);
            return;
        }
        newNode.next=temp.next;
        newNode.prev=temp;
        temp.next.prev=newNode;
        temp.next=newNode;
    }
    //delete At middle
    public void deleteatmiddle(int pos)
    {
        if(head==null)
		{
			System.out.println("head is null,so we cannot delete");
		}
		else{
		    Node temp = head;
		    pos-=2;
		    while(pos>0)
		    {
		        pos--;
		        temp=temp.next;
		    }
		    temp.next=temp.next.next;
		}

    }
    //delete at begin
    public void deleteAtBegin()
	{
		if(head==null)
		{
			System.out.println("head is null cannot delete");
		}
		else
		{
		head=head.next;
			
		}
	}
	//delete at end
   	public void deleteAtEnd()
	{
		if(head==null)
		{
			System.out.println("head is null so we cannot delete");
		}
		else if(head.next==null){
			head=null;
			
		}
		else {
			Node temp = head;
			while(temp.next.next!=null)
			{
				temp=temp.next;
			}
			temp.next=null;
			
		}
	}
	//display
    public void display()
    {
        Node temp = head;
        while(temp!=null)
        {
            System.out.print(temp.data+" ");
            temp=temp.next;
        }
        System.out.println();
    }
}
//Main Function
class Main
{
    public static void main (String[]args)
    {
        Bike Duke = new Bike();
        Duke.insertatend(3);
        Duke.display();
        Duke.insertatend(9);
        Duke.display();
        Duke.insertatend(0);
        Duke.display();
        Duke.insertatbegin(1);
        Duke.display();
        Duke.insertatmiddle(3,2);
        Duke.display();
        Duke.deleteatmiddle(2);
        Duke.display();
        Duke.deleteAtBegin();
        Duke.display();
        Duke.deleteAtEnd();
        Duke.display();
        
    }
}
